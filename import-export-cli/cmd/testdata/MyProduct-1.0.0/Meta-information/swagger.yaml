openapi: 3.0.1
info:
  title: MyProduct
  version: 1.0.0
servers:
 -
  url: /
security:
 -
  default: []
paths:
  /pet/{petId}/uploadImage:
    post:
      tags:
       - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
       -
        name: petId
        in: path
        description: ID of pet to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
       -
        petstore_auth:
         - write:pets
         - read:pets
       -
        default:
         - write:pets
         - read:pets
  /pet/findByStatus:
    get:
      tags:
       - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
       -
        name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
             - available
             - pending
             - sold
            default: available
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid status value
          content: {}
      security:
       -
        petstore_auth:
         - write:pets
         - read:pets
       -
        default:
         - write:pets
         - read:pets
  /pet/findByTags:
    get:
      tags:
       - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
       -
        name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        400:
          description: Invalid tag value
          content: {}
      deprecated: true
      security:
       -
        petstore_auth:
         - write:pets
         - read:pets
       -
        default:
         - write:pets
         - read:pets
  /order:
    post:
      description: Create a new Order
      requestBody:
        description: Order object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        201:
          description: Created. Successful response with the newly created object as entity inthe body. Location header contains URL of newly created entity.
          headers:
            Location:
              description: The URL of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        415:
          description: Unsupported Media Type. The entity of the request was in a not supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
       -
        default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
      x-codegen-request-body-name: body
  /menu:
    get:
      description: Return a list of available menu items
      responses:
        200:
          description: OK. List of APIs is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        304:
          description: Not Modified. Empty body because the client has already the latest version of the requested resource.
          content: {}
        406:
          description: Not Acceptable. The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
       -
        default: []
      x-auth-type: Application & Application User
      x-throttling-tier: Unlimited
components:
  schemas:
    Order:
      title: Pizza Order
      required:
       - orderId
      type: object
      properties:
        customerName:
          type: string
        delivered:
          type: boolean
        address:
          type: string
        pizzaType:
          type: string
        creditCardNumber:
          type: string
        quantity:
          type: number
        orderId:
          type: string
    ErrorListItem:
      title: Description of individual errors that may have occored during a request.
      required:
       - code
       - message
      type: object
      properties:
        message:
          type: string
          description: Description about individual errors occored
        code:
          type: integer
          format: int64
    Error:
      title: Error object returned with 4XX HTTP status
      required:
       - code
       - message
      type: object
      properties:
        message:
          type: string
          description: Error message.
        error:
          type: array
          description: If there are more than one error list them out. Ex. list out validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'
        description:
          type: string
          description: A detail description about the error message.
        code:
          type: integer
          format: int64
        moreInfo:
          type: string
          description: Preferably an url with more details about the error.
    MenuItem:
      title: Pizza menu Item
      required:
       - name
      type: object
      properties:
        price:
          type: string
        description:
          type: string
        name:
          type: string
        image:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Pet:
      required:
       - name
       - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
           - available
           - pending
           - sold
      xml:
        name: Pet
  securitySchemes:
    default:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://test.com
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
          x-scopes-bindings: {}
